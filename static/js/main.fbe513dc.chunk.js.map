{"version":3,"sources":["reportWebVitals.js","Components/Modal/Modal.js","Components/Modal/index.js","Components/CurrentToDoList/CurrentTodoList.js","Components/CurrentToDoList/index.js","Components/FinishedToDoList/FinishedToDoList.js","Components/FinishedToDoList/index.js","Components/Copyright/index.js","Components/Copyright/Copyright.js","App.js","Reducers/TodoReducer.js","Reducers/RootReducer.js","store.js","theme.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Transition","React","forwardRef","props","ref","Slide","direction","useStyles","makeStyles","theme","modal","position","height","input","width","description","marginTop","spacing","Modal","handleClose","id","classes","state","useSelector","todo","dispatch","useDispatch","filter","s","useState","isUpdate","setUpdate","onClose","Dialog","open","fullWidth","maxWidth","TransitionComponent","keepMounted","className","DialogTitle","DialogContent","TextField","label","defaultValue","title","multiline","rowsMax","Typography","variant","Switch","defaultChecked","status","name","color","DialogActions","Button","onClick","document","getElementById","value","type","payload","checked","DialogContentText","length","createdAt","moment","format","ListItemIconWithStyle","withStyles","root","minWidth","ListItemIcon","paper","padding","display","overflow","flexDirection","fontWeight","empty","textAlign","CurrentTodoList","isModalOpen","setModalOpen","modalId","setModalId","currentTodo","_","chain","orderBy","Paper","List","map","t","ListItem","button","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","Fragment","FinishedTodoList","Copyright","align","appBar","zIndex","drawer","appBarSpacer","mixins","toolbar","flexGrow","lineHeight","content","container","paddingTop","paddingBottom","addNew","App","a","axios","method","url","initialData","data","CssBaseline","AppBar","component","noWrap","Container","Grid","item","xs","md","CurrentToDoList","Box","pt","initialState","todoReducer","action","newState","ns","rootReducer","combineReducers","store","createStore","createMuiTheme","palette","light","main","dark","contrastText","secondary","ReactDOM","render","StrictMode","ThemeProvider"],"mappings":"8LAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8LCSRQ,EAAaC,IAAMC,YAAW,SAAoBC,EAAOC,GAC7D,OAAO,cAACC,EAAA,EAAD,aAAOC,UAAU,KAAKF,IAAKA,GAASD,OAGvCI,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,OAAQ,QAEVC,MAAO,CACLC,MAAO,OAETC,YAAa,CACXC,UAAWP,EAAMQ,QAAQ,QC3BdC,ED+BD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,GACrBC,EAAUd,IACVe,EAAQC,aAAY,SAACD,GAAD,OAAWA,EAAME,QACrCC,EAAWC,cACXF,EAAOF,EAAMK,QAAO,SAAAC,GAAC,OAAIA,EAAER,KAAOA,KAJL,EAKLnB,IAAM4B,UAAS,GALV,mBAK5BC,EAL4B,KAKlBC,EALkB,KAO7BC,EAAU,WACdb,IACAY,GAAU,IAGZ,OAAGP,GAAQA,EAAK,IAAMM,EAElB,eAACG,EAAA,EAAD,CACEC,MAAM,EACNC,WAAW,EACXC,SAAS,KACTC,oBAAqBrC,EACrBsC,aAAW,EACXN,QAASA,EACTO,UAAWlB,EAAQX,MAPrB,UASE,cAAC8B,EAAA,EAAD,CAAapB,GAAE,iBAAYA,EAAZ,iBAAf,0BACA,eAACqB,EAAA,EAAD,WACE,8BACE,cAACC,EAAA,EAAD,CACEtB,GAAG,eACHuB,MAAM,QACNJ,UAAWlB,EAAQR,MACnB+B,aAAcpB,EAAK,GAAGqB,UAG1B,qBAAKN,UAAWlB,EAAQN,YAAxB,SACE,cAAC2B,EAAA,EAAD,CACEtB,GAAG,qBACH0B,WAAS,EACTC,QAAS,EACTJ,MAAM,cACNJ,UAAWlB,EAAQR,MACnB+B,aAAcpB,EAAK,GAAGT,gBAG1B,sBAAKwB,UAAWlB,EAAQN,YAAxB,UACE,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAApB,6BACA,cAACC,EAAA,EAAD,CACEC,eAAmC,IAAnB3B,EAAK,GAAG4B,OACxBC,KAAK,gBACLC,MAAM,UACNlC,GAAG,wBAIT,cAACmC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEP,QAAQ,YACRK,MAAM,UACNG,QAAS,WAC8C,KAAlDC,SAASC,eAAe,gBAAgBC,OACkB,KAAxDF,SAASC,eAAe,sBAAsBC,QAEjDnC,EAAS,CACPoC,KAAM,cACNC,QAAS,CACP1C,GAAII,EAAK,GAAGJ,GACZyB,MAAOa,SAASC,eAAe,gBAAgBC,MAC/C7C,YAAa2C,SAASC,eAAe,sBAAsBC,MAC3DR,QAA6D,IAArDM,SAASC,eAAe,iBAAiBI,QAAmB,EAAI,KAG5E/B,MAhBN,uBAyBGR,GAAQA,EAAK,KAAOM,EAE3B,eAACG,EAAA,EAAD,CACEC,MAAM,EACNC,WAAW,EACXC,SAAS,KACTC,oBAAqBrC,EACrBsC,aAAW,EACXN,QAASA,EACTO,UAAWlB,EAAQX,MAPrB,UASE,cAAC8B,EAAA,EAAD,CAAapB,GAAE,iBAAYA,EAAZ,eAAf,SAA6CI,EAAK,GAAGqB,QACrD,cAACJ,EAAA,EAAD,UACE,cAACuB,EAAA,EAAD,CAAmB5C,GAAE,iBAAYA,EAAZ,gBAArB,SACGI,EAAK,GAAGT,gBAGb,eAACwC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQP,QAAQ,YAAYQ,QAAS,kBAAM1B,GAAU,IAAOuB,MAAM,UAAlE,oBAGoB,IAAnB9B,EAAK,GAAG4B,QACP,cAACI,EAAA,EAAD,CACEP,QAAQ,WACRK,MAAM,UACNG,QAAS,WACPhC,EAAS,CACPoC,KAAM,cACNC,QAAStC,EAAK,GAAGJ,KAEnBY,KARJ,0BAkBN,eAACC,EAAA,EAAD,CACEC,MAAM,EACNC,WAAW,EACXC,SAAS,KACTC,oBAAqBrC,EACrBsC,aAAW,EACXN,QAASA,EACTO,UAAWlB,EAAQX,MAPrB,UASE,cAAC8B,EAAA,EAAD,CAAapB,GAAG,2BAAhB,2BACA,eAACqB,EAAA,EAAD,WACE,8BACE,cAACC,EAAA,EAAD,CACEtB,GAAG,YACHuB,MAAM,QACNJ,UAAWlB,EAAQR,UAGvB,qBAAK0B,UAAWlB,EAAQN,YAAxB,SACE,cAAC2B,EAAA,EAAD,CACEtB,GAAG,kBACH0B,WAAS,EACTC,QAAS,EACTJ,MAAM,cACNJ,UAAWlB,EAAQR,aAIzB,cAAC0C,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEP,QAAQ,YACRK,MAAM,UACNG,QAAS,WAC2C,KAA/CC,SAASC,eAAe,aAAaC,OACkB,KAArDF,SAASC,eAAe,mBAAmBC,QAC5CnC,EAAS,CACPoC,KAAM,WACNC,QAAS,CACP1C,GAAIE,EAAMA,EAAM2C,OAAO,GAAG7C,GAAK,EAC/ByB,MAAOa,SAASC,eAAe,aAAaC,MAC5C7C,YAAa2C,SAASC,eAAe,mBAAmBC,MACxDR,OAAQ,EACRc,UAAWC,MAASC,OAAO,uBAG/BpC,MAhBR,wB,yHElKJqC,EAAwBC,aAAW,SAAC7D,GAAD,MAAY,CACnD8D,KAAM,CACJC,SAAU,WAFgBF,CAI1BG,KAEElE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiE,MAAO,CACLC,QAASlE,EAAMQ,QAAQ,GACvB2D,QAAS,OACTC,SAAU,OACVC,cAAe,UAEjBjC,MAAO,CACLkC,WAAY,QAEdC,MAAO,CACLC,UAAW,cClCAC,EDsCS,WACtB,IAAM7D,EAAUd,IACViB,EAAOD,aAAY,SAACD,GAAD,OAAWA,EAAME,QACpCC,EAAWC,cAHW,EAIQzB,IAAM4B,UAAS,GAJvB,mBAIrBsD,EAJqB,KAIRC,EAJQ,OAKEnF,IAAM4B,SAAS,GALjB,mBAKrBwD,EALqB,KAKZC,EALY,KAMxBC,EAAcC,IAAEC,MAAMjE,GAAMkE,QAAQ,CAAC,aAAc,CAAC,QAAQ9B,QAAQjC,QAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEwB,UAEtF,OACE,eAACuC,EAAA,EAAD,CAAOpD,UAAWlB,EAAQqD,MAA1B,UACGS,GAAe,cAAC,EAAD,CAAOhE,YAAa,kBAAMiE,GAAa,IAAQhE,GAAIiE,IACnE,cAACrC,EAAA,EAAD,CAAYC,QAAQ,KAAKK,MAAM,UAAUf,UAAWlB,EAAQwB,MAA5D,gCACC0C,EAAYtB,OAAS,EACpB,cAAC2B,EAAA,EAAD,UACCL,EAAYM,KAAI,SAAAC,GACf,OACE,eAACC,EAAA,EAAD,CACEC,QAAM,EACNvC,QAAS,WAAO6B,EAAWQ,EAAE1E,IAAKgE,GAAa,IAFjD,UAKE,cAACf,EAAD,UACE,cAAC,IAAD,MAEF,cAAC4B,EAAA,EAAD,CAAcC,QAASJ,EAAEjD,QACzB,eAACsD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,MACL/C,MAAM,YACNG,QAAS,kBAAMhC,EAAS,CACtBoC,KAAM,YACNC,QAASgC,EAAE1E,MALf,SAQE,cAAC,IAAD,MAEF,cAACgF,EAAA,EAAD,CACEC,KAAK,MACL5C,QAAS,kBAAMhC,EAAS,CACtBoC,KAAM,cACNC,QAASgC,EAAE1E,MAJf,SAOE,cAAC,IAAD,WA3BN,sBAGsB0E,EAAE1E,UA+B5B,eAAC,IAAMkF,SAAP,WACA,cAACtD,EAAA,EAAD,CAAYC,QAAQ,QAAQV,UAAWlB,EAAQ2D,MAA/C,qCACA,cAAChC,EAAA,EAAD,CAAYC,QAAQ,QAAQV,UAAWlB,EAAQ2D,MAA/C,mC,kBE7EFX,GAAwBC,aAAW,SAAC7D,GAAD,MAAY,CACnD8D,KAAM,CACJC,SAAU,WAFgBF,CAI1BG,KAEElE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiE,MAAO,CACLC,QAASlE,EAAMQ,QAAQ,GACvB2D,QAAS,OACTC,SAAU,OACVC,cAAe,UAEjBjC,MAAO,CACLkC,WAAY,YC3BDwB,GD+BU,WACvB,IAAMlF,EAAUd,KACViB,EAAOD,aAAY,SAACD,GAAD,OAAWA,EAAME,QAFb,EAGOvB,IAAM4B,UAAS,GAHtB,mBAGtBsD,EAHsB,KAGTC,EAHS,OAICnF,IAAM4B,SAAS,GAJhB,mBAItBwD,EAJsB,KAIbC,EAJa,KAK7B,OACE,eAACK,EAAA,EAAD,CAAOpD,UAAWlB,EAAQqD,MAA1B,UACGS,GAAe,cAAC,EAAD,CAAOhE,YAAa,kBAAMiE,GAAa,IAAQhE,GAAIiE,IACnE,cAACrC,EAAA,EAAD,CAAYC,QAAQ,KAAKK,MAAM,UAAUf,UAAWlB,EAAQwB,MAA5D,iCACA,cAAC+C,EAAA,EAAD,UACCJ,IAAEC,MAAMjE,GACRkE,QAAQ,CAAC,aAAc,CAAC,SACxB9B,QACAjC,QAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEwB,UACdyC,KAAI,SAAAC,GACH,OACE,eAACC,EAAA,EAAD,CACEC,QAAM,EACNvC,QAAS,WAAO6B,EAAWQ,EAAE1E,IAAKgE,GAAa,IAFjD,UAKE,cAAC,GAAD,UACE,cAAC,KAAD,CAAc9B,MAAM,cAEtB,cAAC2C,EAAA,EAAD,CAAcC,QAASJ,EAAEjD,UAR3B,uBAGuBiD,EAAE1E,cElDpBoF,GCAG,WAChB,OACE,cAACxD,EAAA,EAAD,CAAYC,QAAQ,QAAQK,MAAM,gBAAgBmD,MAAM,SAAxD,kD,kDCcElG,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvC8D,KAAM,CACJK,QAAS,QAEX8B,OAAQ,CACNC,OAAQlG,EAAMkG,OAAOC,OAAS,EAC9B3B,UAAW,SACXrE,OAAQ,QAEViG,aAAcpG,EAAMqG,OAAOC,QAC3BlE,MAAO,CACLmE,SAAU,EACVC,WAAY,QAEdC,QAAS,CACPF,SAAU,EACVpG,OAAQ,QACRiE,SAAU,QAEZsC,UAAW,CACTC,WAAY3G,EAAMQ,QAAQ,GAC1BoG,cAAe5G,EAAMQ,QAAQ,IAE/ByD,MAAO,CACLC,QAASlE,EAAMQ,QAAQ,GACvB2D,QAAS,OACTC,SAAU,OACVC,cAAe,UAEjBwC,OAAQ,CACNvC,WAAY,YAyDDwC,GArDH,WACV,IAAMlG,EAAUd,KACVkB,EAAWC,cAFD,GAGFH,aAAY,SAACD,GAAD,OAAWA,EAAME,QACPvB,IAAM4B,UAAS,IAJnC,mBAITsD,EAJS,KAIIC,EAJJ,KAiBhB,OAXAnF,IAAM4B,SAAN,sBAAe,4BAAA2F,EAAA,sEACaC,IAAM,CAC9BC,OAAQ,MACRC,IAAK,qEAHM,OACPC,EADO,OAKbnG,EAAS,CACPoC,KAAM,aACNC,QAAS8D,EAAYC,OAPV,2CASZ,IAGD,sBAAKtF,UAAWlB,EAAQkD,KAAxB,UACGY,GAAe,cAAC,EAAD,CAAOhE,YAAa,kBAAMiE,GAAa,IAAQhE,GAAI,IACnE,cAAC0G,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAQpH,SAAS,WAAW4B,UAAWlB,EAAQqF,OAA/C,SACE,cAAC1D,EAAA,EAAD,CAAYgF,UAAU,KAAK/E,QAAQ,KAAKK,MAAM,UAAU2E,QAAM,EAAC1F,UAAWlB,EAAQwB,MAAlF,sCAIF,uBAAMN,UAAWlB,EAAQ6F,QAAzB,UACE,qBAAK3E,UAAWlB,EAAQwF,eACxB,eAACqB,GAAA,EAAD,CAAW9F,SAAS,KAAKG,UAAWlB,EAAQ8F,UAA5C,UACE,eAACgB,GAAA,EAAD,CAAMhB,WAAS,EAAClG,QAAS,EAAzB,UACE,cAACkH,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC7E,EAAA,EAAD,CAAQP,QAAQ,YAAYQ,QAAS,kBAAM2B,GAAa,IAAO9B,MAAM,UAArE,SACE,cAACN,EAAA,EAAD,CAAYC,QAAQ,QAAQV,UAAWlB,EAAQiG,OAA/C,+BAKJ,cAACa,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACC,EAAD,MAEF,cAACJ,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,GAAD,SAGJ,cAACE,GAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAAC,GAAD,gB,kBCjGNC,GAAe,GA4CNC,GA1CK,WAAiC,IAAhCrH,EAA+B,uDAAzBoH,GAAcE,EAAW,uCAC1C/E,EAAkB+E,EAAlB/E,KAAMC,EAAY8E,EAAZ9E,QAEd,OAAQD,GACN,IAAK,aACH,OAAOC,EACT,IAAK,WACH,MAAM,GAAN,oBAAWxC,GAAX,CAAkBwC,IACpB,IAAK,cACH,OAAOxC,EAAMK,QAAO,SAAAC,GAAC,OAAIA,EAAER,KAAO0C,KACpC,IAAK,YACH,IAAI+E,EAAWvH,EAAMuE,KAAI,SAAAiD,GACvB,OAAGA,EAAG1H,KAAM0C,EACH,2BACFgF,GADL,IAEE1F,OAAQ,IAGH0F,KAGX,OAAOD,EAET,IAAK,cACH,IAAIA,EAAWvH,EAAMuE,KAAI,SAAAiD,GACvB,OAAGA,EAAG1H,KAAM0C,EAAQ1C,GACX,2BACF0H,GADL,IAEEjG,MAAOiB,EAAQjB,MACf9B,YAAa+C,EAAQ/C,YACrBqC,OAAQU,EAAQV,SAGX0F,KAGX,OAAOD,EACT,QACE,OAAOvH,ICjCEyH,GAJKC,aAAgB,CAClCxH,KAAMmH,KCCOM,GAFDC,aAAYH,I,SCabtI,GAAQ0I,aAAe,CAClCC,QAAS,CACPlD,QAhBiB,CACnBmD,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAaZC,UAVmB,CACrBJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,c,OCFhBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,GAAjB,SACE,cAACY,EAAA,EAAD,CAAepJ,MAAOA,GAAtB,SACE,cAAC,GAAD,UAINiD,SAASC,eAAe,SAM1BpE,M","file":"static/js/main.fbe513dc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    position: 'absolute',\r\n    height: '50vh'\r\n  },\r\n  input: {\r\n    width: '50%'\r\n  },\r\n  description: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Modal = ({handleClose, id}) => {\r\n  const classes = useStyles();\r\n  const state = useSelector((state) => state.todo);\r\n  const dispatch = useDispatch();\r\n  const todo = state.filter(s => s.id === id);\r\n  const [isUpdate, setUpdate] = React.useState(false);\r\n\r\n  const onClose = () => {\r\n    handleClose();\r\n    setUpdate(false);\r\n  }\r\n\r\n  if(todo && todo[0] && isUpdate) {\r\n    return(\r\n      <Dialog\r\n        open={true}\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={onClose}\r\n        className={classes.modal}\r\n      >\r\n        <DialogTitle id={`dialog-${id}-update-title`}>Update To-Do</DialogTitle>\r\n        <DialogContent>\r\n          <div>\r\n            <TextField \r\n              id=\"update-title\"\r\n              label=\"Title\"\r\n              className={classes.input}\r\n              defaultValue={todo[0].title}\r\n            />\r\n          </div>\r\n          <div className={classes.description}>\r\n            <TextField\r\n              id=\"update-description\"\r\n              multiline\r\n              rowsMax={4}\r\n              label=\"Description\"\r\n              className={classes.input}\r\n              defaultValue={todo[0].description}\r\n            />\r\n          </div>\r\n          <div className={classes.description}>\r\n            <Typography variant=\"body1\">Is it Finished?</Typography>\r\n            <Switch\r\n              defaultChecked={todo[0].status === 0 ? false : true}\r\n              name=\"update-status\"\r\n              color=\"primary\"\r\n              id=\"update-status\"\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              if(document.getElementById('update-title').value !== ''\r\n                && document.getElementById('update-description').value !== ''\r\n              ) {\r\n                dispatch({\r\n                  type: \"UPDATE_TODO\",\r\n                  payload: {\r\n                    id: todo[0].id,\r\n                    title: document.getElementById('update-title').value,\r\n                    description: document.getElementById('update-description').value,\r\n                    status: document.getElementById('update-status').checked === true ? 1 : 0\r\n                  }\r\n                });\r\n                onClose();\r\n              }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  } else if (todo && todo[0] && !isUpdate) {\r\n    return(\r\n      <Dialog\r\n        open={true}\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={onClose}\r\n        className={classes.modal}\r\n      >\r\n        <DialogTitle id={`dialog-${id}-view-title`}>{todo[0].title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id={`dialog-${id}-description`}>\r\n            {todo[0].description}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button variant=\"contained\" onClick={() => setUpdate(true)} color=\"primary\">\r\n            Update\r\n          </Button>\r\n          {todo[0].status === 0 &&\r\n            <Button \r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                dispatch({\r\n                  type: \"DELETE_TODO\",\r\n                  payload: todo[0].id\r\n                });\r\n                onClose();\r\n              }}\r\n            >\r\n            Delete\r\n          </Button>}\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  } else {\r\n    return(\r\n      <Dialog\r\n        open={true}\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={onClose}\r\n        className={classes.modal}\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">Add New To-Do</DialogTitle>\r\n        <DialogContent>\r\n          <div>\r\n            <TextField \r\n              id=\"new-title\"\r\n              label=\"Title\"\r\n              className={classes.input} \r\n            />\r\n          </div>\r\n          <div className={classes.description}>\r\n            <TextField\r\n              id=\"new-description\"\r\n              multiline\r\n              rowsMax={4}\r\n              label=\"Description\"\r\n              className={classes.input}\r\n            />\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              if(document.getElementById('new-title').value !== ''\r\n                && document.getElementById('new-description').value !== '') {\r\n                  dispatch({\r\n                    type: 'ADD_TODO',\r\n                    payload: {\r\n                      id: state[state.length-1].id + 1,\r\n                      title: document.getElementById('new-title').value,\r\n                      description: document.getElementById('new-description').value,\r\n                      status: 0,\r\n                      createdAt: moment().format('YYYY-MM-DD HH:mm')\r\n                    }\r\n                  })\r\n                  onClose();\r\n              }\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import Modal from './Modal';\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Modal from '../Modal';\r\n\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst ListItemIconWithStyle = withStyles((theme) => ({\r\n  root: {\r\n    minWidth: '35px'\r\n  },\r\n}))(ListItemIcon);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  title: {\r\n    fontWeight: 'bold'\r\n  },\r\n  empty: {\r\n    textAlign: 'center'\r\n  }\r\n}));\r\n\r\nconst CurrentTodoList = () => {\r\n  const classes = useStyles();\r\n  const todo = useSelector((state) => state.todo);\r\n  const dispatch = useDispatch();\r\n  const [isModalOpen, setModalOpen] = React.useState(false);\r\n  const [modalId, setModalId] = React.useState(0);\r\n  let currentTodo = _.chain(todo).orderBy(['createdAt'], ['asc']).value().filter(s => s.status === 0);\r\n\r\n  return(\r\n    <Paper className={classes.paper}>\r\n      {isModalOpen && <Modal handleClose={() => setModalOpen(false)} id={modalId} />}\r\n      <Typography variant=\"h6\" color=\"primary\" className={classes.title}>Current To-Do List</Typography>\r\n      {currentTodo.length > 0 ? \r\n        <List>\r\n        {currentTodo.map(t => {\r\n          return (\r\n            <ListItem \r\n              button \r\n              onClick={() => {setModalId(t.id); setModalOpen(true);}}\r\n              key={`currentTodo-${t.id}`}\r\n            >\r\n              <ListItemIconWithStyle>\r\n                <CheckBoxOutlineBlankIcon />\r\n              </ListItemIconWithStyle>\r\n              <ListItemText primary={t.title} />\r\n              <ListItemSecondaryAction>\r\n                <IconButton\r\n                  edge=\"end\"\r\n                  color=\"secondary\"\r\n                  onClick={() => dispatch({\r\n                    type: 'DONE_TODO',\r\n                    payload: t.id\r\n                  })}\r\n                >\r\n                  <CheckCircleIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                  edge=\"end\"\r\n                  onClick={() => dispatch({\r\n                    type: 'DELETE_TODO',\r\n                    payload: t.id\r\n                  })}\r\n                >\r\n                  <DeleteIcon />\r\n                </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          );\r\n        })}\r\n        </List>\r\n      : <React.Fragment>\r\n        <Typography variant=\"body1\" className={classes.empty}>Yey! No To-Do List Left</Typography>\r\n        <Typography variant=\"body1\" className={classes.empty}>Let's find one</Typography>\r\n      </React.Fragment>}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default CurrentTodoList;\r\n","import CurrentTodoList from './CurrentTodoList';\r\n\r\nexport default CurrentTodoList;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { useSelector } from 'react-redux';\r\nimport Modal from '../Modal';\r\n\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nconst ListItemIconWithStyle = withStyles((theme) => ({\r\n  root: {\r\n    minWidth: '35px'\r\n  },\r\n}))(ListItemIcon);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  title: {\r\n    fontWeight: 'bold'\r\n  }\r\n}));\r\n\r\nconst FinishedToDoList = () => {\r\n  const classes = useStyles();\r\n  const todo = useSelector((state) => state.todo);\r\n  const [isModalOpen, setModalOpen] = React.useState(false);\r\n  const [modalId, setModalId] = React.useState(0);\r\n  return(\r\n    <Paper className={classes.paper}>\r\n      {isModalOpen && <Modal handleClose={() => setModalOpen(false)} id={modalId} />}\r\n      <Typography variant=\"h6\" color=\"primary\" className={classes.title}>Finished To-Do List</Typography>\r\n      <List>\r\n      {_.chain(todo)\r\n      .orderBy(['createdAt'], ['desc'])\r\n      .value()\r\n      .filter(s => s.status === 1)\r\n      .map(t => {\r\n        return (\r\n          <ListItem\r\n            button\r\n            onClick={() => {setModalId(t.id); setModalOpen(true);}}\r\n            key={`finishedTodo-${t.id}`}\r\n          >\r\n            <ListItemIconWithStyle>\r\n              <CheckBoxIcon color=\"primary\" />\r\n            </ListItemIconWithStyle>\r\n            <ListItemText primary={t.title} />\r\n          </ListItem>\r\n        );\r\n      })}\r\n      </List>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default FinishedToDoList;\r\n","import FinishedTodoList from './FinishedToDoList';\r\n\r\nexport default FinishedTodoList;\r\n","import Copyright from './Copyright';\r\n\r\nexport default Copyright;\r\n","import Typography from '@material-ui/core/Typography';\r\n\r\nconst Copyright = () => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      Copyright © Erlanda Zakaria 2020\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default Copyright;\r\n","import React from 'react';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CurrentToDoList from './Components/CurrentToDoList';\nimport FinishedToDoList from './Components/FinishedToDoList';\nimport Modal from './Components/Modal';\nimport Copyright from './Components/Copyright';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    textAlign: 'center',\n    height: '50px'\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  title: {\n    flexGrow: 1,\n    lineHeight: '50px'\n  },\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  addNew: {\n    fontWeight: 'bold'\n  }\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state.todo);\n  const [isModalOpen, setModalOpen] = React.useState(false);\n\n  React.useState(async () => {\n    const initialData = await axios({\n      method: 'get',\n      url: 'https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list'\n    });\n    dispatch({\n      type: 'FETCH_TODO',\n      payload: initialData.data\n    })\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      {isModalOpen && <Modal handleClose={() => setModalOpen(false)} id={0} />}\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={classes.appBar}>\n        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n          Erlanda's To - Do List\n        </Typography>\n      </AppBar>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Button variant=\"contained\" onClick={() => setModalOpen(true)} color=\"primary\">\n                <Typography variant=\"body1\" className={classes.addNew}>\n                  Add new To-Do\n                </Typography>\n              </Button>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <CurrentToDoList />\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <FinishedToDoList />\n            </Grid>\n          </Grid>\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = [];\r\n\r\nconst todoReducer = (state=initialState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"FETCH_TODO\":\r\n      return payload;\r\n    case \"ADD_TODO\":\r\n      return [...state, payload];\r\n    case \"DELETE_TODO\":\r\n      return state.filter(s => s.id !== payload);\r\n    case \"DONE_TODO\": {\r\n      let newState = state.map(ns => {\r\n        if(ns.id ===payload) {\r\n          return {\r\n            ...ns,\r\n            status: 1\r\n          }\r\n        } else {\r\n          return ns\r\n        }\r\n      })\r\n      return newState\r\n    }\r\n    case \"UPDATE_TODO\":\r\n      let newState = state.map(ns => {\r\n        if(ns.id ===payload.id) {\r\n          return {\r\n            ...ns,\r\n            title: payload.title,\r\n            description: payload.description,\r\n            status: payload.status\r\n          }\r\n        } else {\r\n          return ns\r\n        }\r\n      })\r\n      return newState\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;","import { combineReducers } from 'redux';\r\nimport todoReducer from './TodoReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  todo: todoReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './Reducers/RootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nlet primaryPallete = {\r\n  light: '#36cccc',\r\n  main: '#2AA5A5',\r\n  dark: '#1d6363',\r\n  contrastText: '#FFFFFF'\r\n}\r\n\r\nlet secondaryPallete = {\r\n  light: '#C6E3F3',\r\n  main: '#41a2d7',\r\n  dark: '#2D7196',\r\n  contrastText: '#FFFFFF'\r\n}\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: primaryPallete,\r\n    secondary: secondaryPallete\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider  } from '@material-ui/core/styles';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport store from './store';\nimport { theme } from './theme';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}